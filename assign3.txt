Script started on Fri 30 Nov 2018 06:02:44 PM EST
]0;shamoonm@ltsp-amd64-alpha: ~/eclipse-workspace/Assignment 3[01;32mshamoonm@ltsp-amd64-alpha[00m:[01;34m~/eclipse-workspace/Assignment 3[00m$ cat AIPlayer.java
//Matthew Shamoon

import java.util.*;

public class AIPlayer extends player
{
	board gameBoard;
	int Symbol;
	String name;
	
	AIPlayer(board gameBoard, int Symbol, String name )
	{
		super();
		this.gameBoard = gameBoard;
		this.Symbol = Symbol;
		this.name = name;
		
	}
	
	/**
	 * plays the game 
	 * @param board
	 */
	public void play(board board)
	{
		Random rand = new Random ();
		int [][] Valid = new int [9][2];
		int i =0;
		boolean valid = false;
		while(!valid)
		{
			for(int row=0; row<3; row++)
			{
				for (int col = 0; col<3; col++)
				{
					if(board.isValid(row,col))
					{
						Valid[i][0] =row;
						Valid[i][1] =col;
						i++;
						
					}
					
				}
			}
			
			int index = rand.nextInt(i) + 0;
			
			int r = Valid[index][0];
			int c = Valid[index][1];
			if(board.isValid(r, c))
			{
				board.makeMove(r, c, Symbol);
				valid = true;
			}
		}
	
		
	}
}
]0;shamoonm@ltsp-amd64-alpha: ~/eclipse-workspace/Assignment 3[01;32mshamoonm@ltsp-amd64-alpha[00m:[01;34m~/eclipse-workspace/Assignment 3[00m$ cat block.java
//Matthew Shamoon

public class block implements global
{
	int state;
	
	
	public block()
	{
		state = 0;
	}
	
	public block(int state)
	{
		this();
		setState(state);
	}
	
	/**
	 * checks if state is valid
	 * @param state
	 * @return
	 */
	public boolean isValidState (int state)
	{

		if(state == 0 || state == 1 || state ==2)
		{
			return true; 
		}
		else
			return false;
	}
	
	/**
	 * sets state
	 * @param state
	 */
	public void setState(int state)
	{
		if(isValidState(state))
		{
		this.state = state;
		}
	}
	
	/**
	 * gets state
	 * @return
	 */
	public int getState()
	{
		return this.state;
	}
	
	/**
	 * overrided toString
	 */
	public String toString()
	{
		if(state == 1)
		{
			return "x";
		}
		else if (state == 2)
		{
			return "o";
		}
		
		else
		{
			return " ";
		}
	}
	
}
]0;shamoonm@ltsp-amd64-alpha: ~/eclipse-workspace/Assignment 3[01;32mshamoonm@ltsp-amd64-alpha[00m:[01;34m~/eclipse-workspace/Assignment 3[00m$ cat board.java
//Matthew Shamoon

import java.util.*;
public class board extends block implements global
{
	block test = new block();
	//ArrayList<block> [][] blocks = new ArrayList[3][3];
	block[][] blocks = new block [3][3];
	
	//intially empty board
	
	public board()
	{
		super();
		for(int r = 0; r<3 ; r++)
		{
			for(int c = 0; c<3; c++)
			{
				blocks[r][c] = new block();
				blocks[r][c].setState(0);
				
			}
		}
	}
	
	/**
	 * 
	 * @param col
	 * @return
	 */
	// checks the columns for a win
	public int checkCol(int col)
	{
		int [] column = new int [3];
		for(int r =0; r<3; r++)
		{
			int state = blocks[r][col].getState();
			column[r] = state;
		}
		
		if(column[0] == 1 && column[1] == 1 && column[2]==1)
		{
			return 1; //X wins
		}
		
		if(column[0] == 2 && column[1] == 2 && column[2]==2)
		{
			return 2; // O wins
		}
		
		else
		{
			return 0; // no win
		}
	}
	 /**
	  * checks row for a win
	  * @param row
	  * @return
	  */
	public int checkRow(int row)
	{
		int [] rows = new int [3];
		for(int c=0; c<3; c++)
		{
			int state = blocks[row][c].getState();
			rows[c] = state;
		}
		
		if(rows[0] == 1 && rows[1] == 1 && rows[2]==1)
		{
			return 1; //X wins
		}
		
		if(rows[0] == 2 && rows[1] == 2 && rows[2]==2)
		{
			return 2; // O wins
		}
		
		else
		{
			return 0; // no win
		}
		
	}
	
	/**
	 * checks diagonals for a win
	 * @return
	 */
	public int checkDiagonals()
	{
		int [] diag1 = new int [3];
		int [] diag2 = new int [3];
		
		diag1 [0] = blocks[0][0].getState();
		diag1 [1] = blocks[1][1].getState();
		diag1 [2] = blocks[2][2].getState();
		
		diag2 [0] = blocks[0][2].getState();
		diag2 [1] = blocks[1][1].getState();
		diag2 [2] = blocks[2][0].getState();
		
		if(diag1[0] == 1 && diag1[1] == 1 && diag1[2]==1)
		{
			return 1; //X wins
		}
		
		if(diag1[0] == 2 && diag1[1] == 2 && diag1[2]==2)
		{
			return 2; // O wins
		}
		
		if(diag2[0] == 1 && diag2[1] == 1 && diag2[2]==1)
		{
			return 1; //X wins
		}
		
		if(diag2[0] == 2 && diag2[1] == 2 && diag2[2]==2)
		{
			return 2; // O wins
		}
		
		else
		{
			return 0; // no win
		}
	}
	
	/**
	 * checks for a draw
	 * @return
	 */
	public int checkDraw()
	{
		for(int r =0; r<3; r++)
		{
			for(int c = 0; c<3; c++)
			{
				if(blocks[r][c].getState() == 0)
				{
					return 0; // no draw
				}
			}
		}
		
		return 1; // it is a draw
	}
	
	/**
	 * displays board
	 */
	public void displayBoard()
	{
		for(int r =0; r<3; r++)
		{
			for(int c=0; c<1; c++)
			{
				
				System.out.println( blocks[r][c] + "|" + blocks[r][c+1]+ "|" + blocks[r][c+2]);

			}
		}
	}
	
	/**
	 * displays slection board
	 */
	public void displayPlayerSelectionBoard()
	{
		for(int r =0; r<3; r++)
		{
			for(int c=0;c<1;c++) 
			{
				if(blocks[r][c].getState() == 0)
				{
					System.out.print(3*r + 1 + c);
				}
				else
				{
					System.out.print(blocks[r][c]);
				}
				
				if(blocks[r][c+1].getState() == 0)
				{
					System.out.print("|" + (3*r + 2 + c) +"|");
				}
				else
				{
					System.out.print("|"+blocks[r][c+1]+"|");
				}
				
				if(blocks[r][c+2].getState() == 0)
				{
					System.out.println(3*r + 3 + c);
				}
				else
				{
					System.out.println(blocks[r][c+2]);
				}
				
			
			}
		}
	}
	
	/**
	 * 
	 * @param r
	 * @param c
	 * @param player
	 * @return
	 */
	//checks if move is legal and updates state 
	public boolean makeMove(int r, int c, int player)
	{
		if(blocks[r][c].getState() == 0)
		{
			blocks[r][c].setState(player);
			return true;
		}
		else 
		{
			System.out.println("INVALID MOVE!");
			return false;
		}
	}
	
	/**
	 * checks if move is valid
	 * @param r
	 * @param c
	 * @return
	 */
	public boolean isValid(int r, int c)
	{
		if(blocks[r][c].getState() == 0)
		{
			return true;
		}
		else 
		{
			return false;
		}
	}
	
}
]0;shamoonm@ltsp-amd64-alpha: ~/eclipse-workspace/Assignment 3[01;32mshamoonm@ltsp-amd64-alpha[00m:[01;34m~/eclipse-workspace/Assignment 3[00m$ cat game.java
// Matthew Shamoon

import java.util.*;


public class game extends board implements global
{
	boolean done = false;
	board gameBoard = new board();
	int playerO = 2;
	int playerX = 1;
	
	Random rand = new Random();
	int turn = rand.nextInt(2) + 1;
	
	
	public game()
	{
		super();
	}
	
	/**
	 * starts the game and runs it depending on the users inputs
	 */
	public void start()
	{
		Scanner sc1 = new Scanner(System.in);
		int choice = 1;
		boolean valid = false;
		boolean exit = false;
		

		valid = false;
		while(!valid)
		{
		System.out.println("TIC TAC TOE");
		System.out.println("Pick an option:");
		System.out.println("1: Player VS Player");
		System.out.println("2: Player VS AI");
		System.out.println("3: QUIT");
	
		choice = sc1.nextInt();
		sc1.nextLine();
	if(choice == 1 || choice == 2 || choice ==3)
		{
			valid = true;
		}
		}
		
		
			if (choice == 1)
			{
				System.out.println("Input Player 1's Name");
				String name1 = sc1.nextLine();
				HumanPlayer player1 = new HumanPlayer(gameBoard, 1, name1);
				
				System.out.println("Input Player 2's Name");
				String name2 = sc1.nextLine();
				HumanPlayer player2 = new HumanPlayer(gameBoard, 2, name2);
				
				while(!done) 
				{
					if (turn == 1)
					{
						System.out.println("It is " + player1.name +"'s turn");
						player1.play(gameBoard);
					}
					else 
					{
						System.out.println("It is " + player2.name +"'s turn");
						player2.play(gameBoard);
					}
					

					
					for(int i =0; i<3; i++)
					{
						if(gameBoard.checkRow(i) == 1 || gameBoard.checkCol(i) == 1)
						{
							System.out.println("X Wins");
							done = true;
							gameBoard.displayBoard();

							break;
							
						}
						if(gameBoard.checkRow(i) == 2 || gameBoard.checkCol(i) == 2)
						{
							System.out.println("O Wins");
							done = true;
							gameBoard.displayBoard();

							break;
						}
					}
					
					if(gameBoard.checkDiagonals() == 1) 
					{
						System.out.println("X Wins");
						done = true;
						gameBoard.displayBoard();

					}
					
					if(gameBoard.checkDiagonals() == 2)
					{
						System.out.println("O Wins");
						done = true;
						gameBoard.displayBoard();

					}
					
					if(gameBoard.checkDraw() == 1) 
					{
						System.out.println("It is a draw");
						done = true;
						gameBoard.displayBoard();
					}
					
					if(turn == 1)
					{
						turn = 2;
					}
					else
					{
						turn = 1;
					}
			
		}
			
		}
		if(choice == 2)
		{
			System.out.println("Input Player 1's Name");
			String name1 = sc1.nextLine();
			HumanPlayer player1 = new HumanPlayer(gameBoard, 1, name1);
			
			AIPlayer AI = new AIPlayer(gameBoard, 2,"Bot");
			
			while(!done) 
			{
				if (turn == 1)
				{
					System.out.println("It is " + player1.name +"'s turn");
					player1.play(gameBoard);
				}
				else  if(turn ==2)
				{
					System.out.println("It is the bot's turn");
					AI.play(gameBoard);
				}
				
				for(int i =0; i<3; i++)
				{
					if(gameBoard.checkRow(i) == 1 || gameBoard.checkCol(i) == 1)
					{
						done = true;
						gameBoard.displayBoard();
						System.out.println("X Wins");


						break;
						
					}
					if(gameBoard.checkRow(i) == 2 || gameBoard.checkCol(i) == 2)
					{

						done = true;
						gameBoard.displayBoard();
						System.out.println("O Wins");
						break;
					}
				}
				
				if(gameBoard.checkDiagonals() == 1) 
				{

					done = true;
					gameBoard.displayBoard();
					System.out.println("X Wins");
				}
				
				if(gameBoard.checkDiagonals() == 2)
				{
					done = true;
					gameBoard.displayBoard();
					System.out.println("O Wins");

				}
				
				if(gameBoard.checkDraw() == 1) 
				{
					done = true;
					gameBoard.displayBoard();
					System.out.println("It is a draw");

				}
				
				if(turn == 1)
				{
					turn = 2;
				}
				else
				{
					turn = 1;
				}
				
			}
		
		}
		
		if(choice == 3)
		{
			exit = true;
		}
	
		sc1.close();
	}
}

]0;shamoonm@ltsp-amd64-alpha: ~/eclipse-workspace/Assignment 3[01;32mshamoonm@ltsp-amd64-alpha[00m:[01;34m~/eclipse-workspace/Assignment 3[00m$ cat glbo[K[Kobal.java
//Matthew Shamoon

public interface global 
{
	int EMPTY = 0;
	int x = 1;
	int o = 2; 
	
	
	
}
]0;shamoonm@ltsp-amd64-alpha: ~/eclipse-workspace/Assignment 3[01;32mshamoonm@ltsp-amd64-alpha[00m:[01;34m~/eclipse-workspace/Assignment 3[00m$ cat HumanPlayer.java [A
//Matthew Shamoon

import java.util.*;

public class HumanPlayer extends player
{
	board gameBoard;
	int Symbol;
	String name;
	
	/**
	 * 
	 * @param board
	 * @param playerSymbol
	 * @param name
	 */
	public HumanPlayer(board board, int playerSymbol, String name) 
	{
		super();
		this.gameBoard= board;
		this.playerSymbol = playerSymbol;
		this.name = name;
	}
	/**
	 * @param board 
	 * plays the game
	 */
	public void play(board board)
	{
		int r=0;
		int c=0; 
		boolean nextTurn = false;
		while(!nextTurn)
		{
		Scanner sc1 = new Scanner(System.in);
		board.displayPlayerSelectionBoard();
		
		int selection = sc1.nextInt();
		
		switch(selection)
		{
			case 1: r=0;
					c=0;
					break;
			
			case 2: r=0;
					c=1;
					break;
					
			case 3: r=0;
					c=2;
					break;

			case 4: r=1;
					c=0;
					break;
				
			case 5: r=1;
					c=1;
					break;
	
			case 6: r=1;
					c=2;
					break;
			
			case 7: r=2;
					c=0;
					break;

			case 8: r=2;
					c=1;
					break;
					
			case 9: r=2;
					c=2;
					break;	
		}
		
		if(board.isValid(r,c))
		{
		board.makeMove(r, c, playerSymbol);
		nextTurn = true;
		}
		else
		{
			System.out.println("INVALID MOVE! PICK ANOTHER SPOT");
		}
	}
		//sc1.close();
	}
}
	


]0;shamoonm@ltsp-amd64-alpha: ~/eclipse-workspace/Assignment 3[01;32mshamoonm@ltsp-amd64-alpha[00m:[01;34m~/eclipse-workspace/Assignment 3[00m$ cat player.java
//Matthew Shamoon

import java.util.Scanner;

abstract public class player 
{
	board gameBoard;
	String playerName;
	int playerSymbol;
	
	public player()
	{
		
	}
	
	/**
	 * 
	 * @param board
	 * @param playerSymbol
	 * @param name
	 */
	public player(board board, int playerSymbol, String name)
	{
		gameBoard = board;
		this.playerSymbol = playerSymbol;
		playerName = name;
	}
	
	/**
	 * 
	 * @param board
	 */
	abstract public void play(board board);
	
		
}
]0;shamoonm@ltsp-amd64-alpha: ~/eclipse-workspace/Assignment 3[01;32mshamoonm@ltsp-amd64-alpha[00m:[01;34m~/eclipse-workspace/Assignment 3[00m$ cat t[KTicTacToe.java
//Matthew Shamoon
public class TicTacToe 
{
	public static void main(String [] args)
	{
		game MyGame = new game();
		MyGame.start();
		
	}
}
]0;shamoonm@ltsp-amd64-alpha: ~/eclipse-workspace/Assignment 3[01;32mshamoonm@ltsp-amd64-alpha[00m:[01;34m~/eclipse-workspace/Assignment 3[00m$ javac TicTacToe.java [A
]0;shamoonm@ltsp-amd64-alpha: ~/eclipse-workspace/Assignment 3[01;32mshamoonm@ltsp-amd64-alpha[00m:[01;34m~/eclipse-workspace/Assignment 3[00m$ k[Kjava TicTacToe
TIC TAC TOE
Pick an option:
1: Player VS Player
2: Player VS AI
3: QUIT
1
Input Player 1's Name
matt
Input Player 2's Name
jack
It is jack's turn
1|2|3
4|5|6
7|8|9
1
It is matt's turn
o|2|3
4|5|6
7|8|9
2
It is jack's turn
o|x|3
4|5|6
7|8|9
5
It is matt's turn
o|x|3
4|o|6
7|8|9
3
It is jack's turn
o|x|x
4|o|6
7|8|9
9
O Wins
o|x|x
 |o| 
 | |o
]0;shamoonm@ltsp-amd64-alpha: ~/eclipse-workspace/Assignment 3[01;32mshamoonm@ltsp-amd64-alpha[00m:[01;34m~/eclipse-workspace/Assignment 3[00m$ java TicTacToe
TIC TAC TOE
Pick an option:
1: Player VS Player
2: Player VS AI
3: QUIT
2
Input Player 1's Name
matt
It is the bot's turn
It is matt's turn
1|2|3
o|5|6
7|8|9
1
It is the bot's turn
It is matt's turn
x|2|3
o|5|6
7|8|o
2
It is the bot's turn
It is matt's turn
x|x|3
o|5|o
7|8|o
3
x|x|x
o| |o
 | |o
X Wins
]0;shamoonm@ltsp-amd64-alpha: ~/eclipse-workspace/Assignment 3[01;32mshamoonm@ltsp-amd64-alpha[00m:[01;34m~/eclipse-workspace/Assignment 3[00m$ ls -s[Kl
total 33
-rw-r--r-- 1 shamoonm temp  845 Nov 30 18:04 AIPlayer.class
-rw-r--r-- 1 shamoonm temp  950 Nov 30 18:01 AIPlayer.java
-rw-r--r-- 1 shamoonm temp    0 Nov 30 18:02 assign3.txt
-rw-r--r-- 1 shamoonm temp  725 Nov 30 18:04 block.class
-rw-r--r-- 1 shamoonm temp  876 Nov 30 18:01 block.java
-rw-r--r-- 1 shamoonm temp 2575 Nov 30 18:04 board.class
-rw-r--r-- 1 shamoonm temp 4008 Nov 30 18:01 board.java
-rw-r--r-- 1 shamoonm temp 2947 Nov 30 18:04 game.class
-rw-r--r-- 1 shamoonm temp 4169 Nov 30 18:01 game.java
-rw-r--r-- 1 shamoonm temp  192 Nov 30 18:04 global.class
-rw-r--r-- 1 shamoonm temp  106 Nov 30 18:01 global.java
-rw-r--r-- 1 shamoonm temp 1237 Nov 30 18:04 HumanPlayer.class
-rw-r--r-- 1 shamoonm temp 1326 Nov 30 18:01 HumanPlayer.java
-rw-r--r-- 1 shamoonm temp  453 Nov 30 18:04 player.class
-rw-r--r-- 1 shamoonm temp  498 Nov 30 18:01 player.java
-rw-r--r-- 1 shamoonm temp  316 Nov 30 18:04 TicTacToe.class
-rw-r--r-- 1 shamoonm temp  152 Nov 30 18:01 TicTacToe.java
]0;shamoonm@ltsp-amd64-alpha: ~/eclipse-workspace/Assignment 3[01;32mshamoonm@ltsp-amd64-alpha[00m:[01;34m~/eclipse-workspace/Assignment 3[00m$ exit
exit

Script done on Fri 30 Nov 2018 06:06:22 PM EST
